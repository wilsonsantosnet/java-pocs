aad.clientId=3964c55a-54b5-472e-a930-8b92ad4e7d70
aad.secret=Ra27Q~Jg5Q.5~4vGg8ZAOytE-OWp4fcYj12Ci
aad.authority=https://login.microsoftonline.com/779811d8-4753-4c34-baeb-6b53957d52e3
aad.scopes=openid profile offline_access

## TODO: use aad.instance instead of authority
## TODO: build authority from instance+tenant
## TODO: also baseURL for graph should be configurable (graph.us, graph.cn, etc.)

aad.signOutEndpoint=/oauth2/v2.0/logout/
aad.postSignOutFragment=?post_logout_redirect_uri=

# app.homePage is by default set to dev server address and app context path on the server
# for apps deployed to azure, use https://your-sub-domain.azurewebsites.net
app.homePage=http://localhost:8081/msal4j-servlet-roles

# endpoint for AAD redirect. Configure this to be the same as the URL pattern for AADRedirectServlet.java
app.redirectEndpoint=/auth/redirect

# app's state value validity in seconds
app.stateTTL=600

# where to store session variables related to MSAL
app.sessionParam=msalAuth
# protect these endpoints by checking authenticated
app.protect.authenticated=/token_details

#local short names for app roles - e.g., sets admin to mean PrivilegedAdmin (useful for long rule sets defined in the next key, app.protect.roles)
app.roles=admin PrivilegedAdmin, user RegularUser

# A list of protected routes and its corresponding <space-separated> role(s) that can view it; the start of the next route & its role(s) is delimited by a <comma-and-space-separator>
# # this says: /admins_only can be accessed by PrivilegedAdmin, /regular_user can be accessed by PrivilegedAdmin role and the RegularUser role
app.protect.roles=/admin_only admin, /regular_user admin user
